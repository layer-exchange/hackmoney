{
  "address": "0x014243646aa095e8B6688FB5BA64F6578c9297d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lxUSD",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswap",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum LXAMM.Dex",
          "name": "dex",
          "type": "uint8"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getDepositedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lxUSD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "enum LXAMM.Dex",
          "name": "dex",
          "type": "uint8"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4ebf047dd19e18a670d6abc0789667af8db7d5eba8133922e1422c460e4c690",
  "receipt": {
    "to": null,
    "from": "0xB1B11E04348f4271B163dB51138704F3Dec0c128",
    "contractAddress": "0x014243646aa095e8B6688FB5BA64F6578c9297d2",
    "transactionIndex": 23,
    "gasUsed": "2434870",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000200000008000000000000000000000000000000000000000000000002000000000000000000000000008000000028000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000100000000000000000000000001000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4523a6d82792c7643a5e099b1f69930875c78dc0db645de8f8eaebaaeac38ef3",
    "transactionHash": "0xf4ebf047dd19e18a670d6abc0789667af8db7d5eba8133922e1422c460e4c690",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 8878539,
        "transactionHash": "0xf4ebf047dd19e18a670d6abc0789667af8db7d5eba8133922e1422c460e4c690",
        "address": "0x014243646aa095e8B6688FB5BA64F6578c9297d2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x000000000000000000000000b1b11e04348f4271b163db51138704f3dec0c128",
          "0x000000000000000000000000b1b11e04348f4271b163db51138704f3dec0c128"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x4523a6d82792c7643a5e099b1f69930875c78dc0db645de8f8eaebaaeac38ef3"
      }
    ],
    "blockNumber": 8878539,
    "cumulativeGasUsed": "7591840",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x27f32317432447f30C03C405f8fBBB19DfBccDe9",
    "0x4FA2fb6e31AE54bE754797a47dF9C303eaF810B4",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "solcInputHash": "3627972b56979e9c1fbf3faf402840d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lxUSD\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum LXAMM.Dex\",\"name\":\"dex\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getDepositedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lxUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"enum LXAMM.Dex\",\"name\":\"dex\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for the LXAMM (Automated Market Maker). This AMM creates decentralized trading pools on different DEXs. Liquidity is provided with one token only. Tokens can be deposited and withdrawn from this contract. Governance has control over this token. More details about this AMM contact can be found in the README file.*\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lxAMM/LXAMM.sol\":\"LXAMM\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xaa1c4a9b2a2a0bca52f678e04013c0117ad597c57a5c891566bab49e5ae625f3\",\"license\":\"GPL-3.0\"},\"contracts/lxAMM/LXAMM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./LXLinkOracle.sol\\\";\\nimport \\\"./LXLpToken.sol\\\";\\nimport \\\"./LXStableToken.sol\\\";\\n\\nimport \\\"../interfaces/IERC20Detailed.sol\\\";\\n\\n/**\\n * @dev Contract for the LXAMM (Automated Market Maker).\\n *\\n * This AMM creates decentralized trading pools on different DEXs.\\n * Liquidity is provided with one token only.\\n * Tokens can be deposited and withdrawn from this contract.\\n * Governance has control over this token.\\n *\\n * More details about this AMM contact can be found in the README file.\\n **/\\ncontract LXAMM is AccessControl {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    enum Dex {\\n        PANCAKESWAP,\\n        SUSHISWAP,\\n        UNISWAP\\n    }\\n    mapping(address => address) private _depositedTokens;\\n\\n    address public immutable lxUSD;\\n    address public immutable oracle;\\n    address public immutable uniswap;\\n\\n    constructor(\\n        address _lxUSD,\\n        address _oracle,\\n        address _uniswap\\n    ) {\\n        _setupRole(ADMIN, msg.sender);\\n\\n        lxUSD = _lxUSD;\\n        oracle = _oracle;\\n        uniswap = _uniswap;\\n    }\\n\\n    function getDepositedTokenAddress(address _token) external view returns (address) {\\n        return _depositedTokens[_token];\\n    }\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        Dex dex\\n    ) external {\\n        // TODO: read decimal settings from chainlink\\n        // fix decimal to 8 for now\\n        uint256 mktPrice = LXLinkOracle(oracle).getPriceUSD(token) * 10**10;\\n\\n        // TBD: can be overflow\\n        // calculate mint amount\\n        // TODO: read token decimal() to scale right\\n        // fix decimal to 18 for now\\n        uint256 mintAmount = (mktPrice * amount) / 10**18;\\n        // mint lxUSD synthetic stablecoin\\n        LXStableToken(lxUSD).mint(address(this), mintAmount);\\n\\n        // acquire token from sender\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n\\n        // deposit into DEX of choice\\n        uint256 liquidity = 0;\\n        if (dex == Dex.PANCAKESWAP) {}\\n\\n        if (dex == Dex.SUSHISWAP) {}\\n\\n        if (dex == Dex.UNISWAP) {\\n            liquidity = _uniswapDeposit(lxUSD, mintAmount, token, amount);\\n        }\\n\\n        // mint lxLP token\\n        address lxLP = _depositedTokens[token];\\n        if (lxLP == address(0)) {\\n            lxLP = address(new LXLpToken(IERC20Detailed(token).name(), IERC20Detailed(token).symbol()));\\n            _depositedTokens[token] = lxLP;\\n        }\\n        LXLpToken(lxLP).mint(msg.sender, liquidity);\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        Dex dex\\n    ) external {\\n        // remove liquidity\\n        uint256 amountToken = 0;\\n        uint256 amountUSD = 0;\\n        if (dex == Dex.PANCAKESWAP) {}\\n\\n        if (dex == Dex.SUSHISWAP) {}\\n\\n        if (dex == Dex.UNISWAP) {\\n            (amountToken, amountUSD) = _uniswapWithdraw(token, lxUSD, liquidity);\\n        }\\n        // burn lxLP token\\n        LXLpToken(_depositedTokens[token]).burn(msg.sender, liquidity);\\n\\n        // TODO: read decimal settings from chainlink\\n        // fix decimal to 8 for now\\n        uint256 mktPrice = LXLinkOracle(oracle).getPriceUSD(token) * 10**10;\\n\\n        // TBD: can be overflow\\n        // calculate mint amount\\n        // TODO: read token decimal() to scale right\\n        // fix decimal to 18 for now\\n        uint256 burnAmount = (mktPrice * amountToken) / 10**18;\\n        require(mktPrice > 0, \\\"LxUniswap: market price cannot be zero.\\\");\\n        if (burnAmount > amountUSD) {\\n            amountToken = (amountToken * amountUSD) / burnAmount;\\n            burnAmount = amountUSD;\\n        }\\n\\n        // burn lxUSD\\n        LXStableToken(lxUSD).burn(address(this), burnAmount);\\n\\n        // transfer token to sender\\n        IERC20(token).transfer(msg.sender, amountToken);\\n\\n        // if impermanent loss, compenste with lxUSD\\n        if (burnAmount < amountUSD) {\\n            LXStableToken(lxUSD).transfer(msg.sender, amountUSD - burnAmount);\\n        }\\n    }\\n\\n    function _uniswapDeposit(\\n        address token,\\n        uint256 amountToken,\\n        address stableToken,\\n        uint256 amountUSD\\n    ) internal returns (uint256) {\\n        // add liquidity to ERC20 <-> lxUSD pair pool\\n        IERC20(stableToken).approve(uniswap, amountUSD);\\n        IERC20(token).approve(uniswap, amountToken);\\n        (, , uint256 liquidity) = IUniswapV2Router02(uniswap).addLiquidity(\\n            token, // tokenA\\n            stableToken, // tokenB\\n            amountToken, // amountADesired\\n            amountUSD, // amountBDesired\\n            amountToken, // amountAMin\\n            amountUSD, // amountBMin\\n            address(this), // to\\n            block.timestamp + 1800 // deadline (30 mins)\\n        );\\n\\n        return liquidity;\\n    }\\n\\n    function _uniswapWithdraw(\\n        address token,\\n        address stableToken,\\n        uint256 liquidity\\n    ) internal returns (uint256, uint256) {\\n        // get address of the pair ERC20 <-> lxUSD\\n        address pair = IUniswapV2Factory(uniswap).getPair(token, stableToken);\\n        // remove liquidity from ERC20 <-> lxUSD pool\\n        IERC20(pair).approve(uniswap, liquidity);\\n        (uint256 amountToken, uint256 amountUSD) = IUniswapV2Router02(uniswap).removeLiquidity(\\n            token,\\n            stableToken,\\n            liquidity, // liquidity\\n            0, //amountAMin\\n            0, // amountBMin\\n            address(this), // to\\n            block.timestamp + 1800 // deadline (30 mins)\\n        );\\n\\n        return (amountToken, amountUSD);\\n    }\\n}\\n\",\"keccak256\":\"0xd969706a736eb634b7e1766a87d43e8bfab47d3778c8befa05ed30075f9dee53\",\"license\":\"GPL-3.0\"},\"contracts/lxAMM/LXLinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract to calculate the USD market value of an asset.\\n *\\n * This call Chainlink (LINK) oracle to calculate the USD market value of\\n * a provided asset.\\n * Governance has control over this contract.\\n **/\\ncontract LXLinkOracle is AccessControl {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    mapping(address => address) public tokensUSD;\\n    mapping(address => address) public tokensETH;\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    enum OracleType {\\n        ORACLE_USD_TYPE,\\n        ORACLE_ETH_TYPE\\n    }\\n\\n    constructor() {\\n        _setRoleAdmin(ADMIN, ADMIN);\\n        _setupRole(ADMIN, msg.sender);\\n\\n        // wBTC\\n        tokensUSD[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0xF5fff180082d6017036B771bA883025c654BC935;\\n        // wETH\\n        tokensUSD[WETH] = 0xF79D6aFBb6dA890132F9D7c355e3015f15F3406F;\\n\\n        // wBTC\\n        tokensETH[0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599] = 0x0133Aa47B6197D0BA090Bf2CD96626Eb71fFd13c;\\n    }\\n\\n    /**\\n     * @dev Gets the USD market value of a given token.\\n     *\\n     * @param token the token to calculate the market value of.\\n     **/\\n    function getPriceUSD(address token) external view returns (uint256) {\\n        if (tokensUSD[token] != address(0)) {\\n            (, int256 price, , , ) = AggregatorV3Interface(tokensUSD[token]).latestRoundData();\\n\\n            return uint256(price);\\n        } else if (tokensETH[token] != address(0)) {\\n            // TODO: read decimal settings from chainlink\\n            // fix decimal to 8 for now\\n            (, int256 priceInETH, , , ) = AggregatorV3Interface(tokensETH[token]).latestRoundData();\\n            (, int256 ETHtoUSD, , , ) = AggregatorV3Interface(tokensUSD[WETH]).latestRoundData();\\n            uint256 price = uint256(priceInETH * ETHtoUSD) / 10**8;\\n\\n            return price;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Set oracle address for token\\n     *\\n     * @param token the token want to set.\\n     * @param oracleAddress the oracle address for token.\\n     * @param oracleType type of oracle for token: ORACLE_USD_TYPE or ORACLE_ETH_TYPE.\\n     **/\\n    function setOracleAddress(\\n        address token,\\n        address oracleAddress,\\n        OracleType oracleType\\n    ) external onlyRole(ADMIN) {\\n        if (oracleType == OracleType.ORACLE_USD_TYPE) {\\n            tokensUSD[token] = oracleAddress;\\n        } else if (oracleType == OracleType.ORACLE_ETH_TYPE) {\\n            tokensETH[token] = oracleAddress;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa312e4f2090f10f4872050f064e53a10bd4a97f9c08834e4b72cee04f39e8d3c\",\"license\":\"GPL-3.0\"},\"contracts/lxAMM/LXLpToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Contract for the lxLP token.\\n *\\n * This token holds the liquidity exchange value of a provided asset.\\n * The token owner is granted exclusive access to the tokens.\\n **/\\ncontract LXLpToken is ERC20, Ownable {\\n    constructor(string memory name, string memory symbol)\\n        ERC20(string(abi.encodePacked(\\\"lxLP \\\", name)), string(abi.encodePacked(\\\"lx\\\", symbol)))\\n    {}\\n\\n    /**\\n     * @dev Mints tokens to an account.\\n     *\\n     * @param account the account to mint tokens to.\\n     * @param amount  the amount of tokens to mint.\\n     **/\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens from an account.\\n     *\\n     * @param account the account to burn tokens from.\\n     * @param amount  the amount of tokens to burn.\\n     **/\\n    function burn(address account, uint256 amount) external onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x53a1a5fe73dd0e18f5efd29d3c6f68fa25c43bfdb099b92a24e24210e63217f2\",\"license\":\"GPL-3.0\"},\"contracts/lxAMM/LXStableToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Contract for the lxUSD synthetic stablecoin.\\n *\\n * This token holds the USD market value value of a provided asset.\\n * Governance has control over this token.\\n **/\\ncontract LXStableToken is AccessControl, ERC20(\\\"Layer Exchange USD\\\", \\\"lxUSD\\\") {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    constructor() {\\n        _setRoleAdmin(ADMIN, ADMIN);\\n        _setupRole(ADMIN, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Mints tokens to an account.\\n     *\\n     * @param account the account to mint tokens to.\\n     * @param amount  the amount of tokens to mint.\\n     **/\\n    function mint(address account, uint256 amount) external onlyRole(ADMIN) {\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens from an account.\\n     *\\n     * @param account the account to burn tokens from.\\n     * @param amount  the amount of tokens to burn.\\n     **/\\n    function burn(address account, uint256 amount) external onlyRole(ADMIN) {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x39227107fadb069351d80c4eb80c76a13eca5634d374fa3237ef567d6a4dfefc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002cd938038062002cd9833981016040819052620000349162000155565b620000607fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec423362000088565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c0526200019f565b62000094828262000098565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000094576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000f43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200015057600080fd5b919050565b6000806000606084860312156200016b57600080fd5b620001768462000138565b9250620001866020850162000138565b9150620001966040850162000138565b90509250925092565b60805160601c60a05160601c60c05160601c612aa6620002336000396000818161016901528181610cd501528181610d6c01528181610e0d015281816110740152818161111f01526111bb0152600081816102410152818161043301526108770152600081816102190152818161037101528181610594015281816106920152818161094c0152610a940152612aa66000f3fe60806040523480156200001157600080fd5b5060043610620000fd5760003560e01c80636d1a23951162000097578063a217fddf116200006e578063a217fddf146200027a578063a40caa8e1462000283578063d547741f14620002b2578063f19ed6be14620002c957600080fd5b80636d1a239514620002135780637dc0d1d0146200023b57806391d14854146200026357600080fd5b80632892a97711620000d85780632892a97714620001a45780632a0acc6a14620001bd5780632f2ff15d14620001e557806336568abe14620001fc57600080fd5b806301ffc9a71462000102578063248a9ca3146200012e5780632681f7e41462000163575b600080fd5b62000119620001133660046200157e565b620002e0565b60405190151581526020015b60405180910390f35b620001546200013f36600462001531565b60009081526020819052604090206001015490565b60405190815260200162000125565b6200018b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200162000125565b620001bb620001b5366004620014c3565b62000318565b005b620001547fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b620001bb620001f63660046200154b565b62000751565b620001bb6200020d3660046200154b565b62000780565b6200018b7f000000000000000000000000000000000000000000000000000000000000000081565b6200018b7f000000000000000000000000000000000000000000000000000000000000000081565b62000119620002743660046200154b565b62000802565b62000154600081565b6200018b6200029436600462001483565b6001600160a01b039081166000908152600160205260409020541690565b620001bb620002c33660046200154b565b6200082b565b620001bb620002da366004620014c3565b62000855565b60006001600160e01b03198216637965db0b60e01b14806200031257506301ffc9a760e01b6001600160e01b03198316145b92915050565b600080808360028111156200033157620003316200189c565b505060018360028111156200034a576200034a6200189c565b505060028360028111156200036357620003636200189c565b14156200039d5762000397857f00000000000000000000000000000000000000000000000000000000000000008662000ca7565b90925090505b6001600160a01b0385811660009081526001602052604090819020549051632770a7eb60e21b815233600482015260248101879052911690639dc29fac90604401600060405180830381600087803b158015620003f957600080fd5b505af11580156200040e573d6000803e3d6000fd5b5050604051635708447d60e01b81526001600160a01b038881166004830152600093507f0000000000000000000000000000000000000000000000000000000000000000169150635708447d9060240160206040518083038186803b1580156200047757600080fd5b505afa1580156200048c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b2919062001663565b620004c3906402540be400620017fd565b90506000670de0b6b3a7640000620004dc8584620017fd565b620004e89190620017da565b905060008211620005505760405162461bcd60e51b815260206004820152602760248201527f4c78556e69737761703a206d61726b65742070726963652063616e6e6f74206260448201526632903d32b9379760c91b60648201526084015b60405180910390fd5b82811115620005785780620005668486620017fd565b620005729190620017da565b93508290505b604051632770a7eb60e21b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b158015620005e157600080fd5b505af1158015620005f6573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152336004820152602481018790526001600160a01b038a16925063a9059cbb9150604401602060405180830381600087803b1580156200064357600080fd5b505af115801562000658573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067e91906200150d565b508281101562000748576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb33620006c484876200181f565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200070b57600080fd5b505af115801562000720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200074691906200150d565b505b50505050505050565b6000828152602081905260409020600101546200076f813362000efe565b6200077b838362000f6d565b505050565b6001600160a01b0381163314620007f25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840162000547565b620007fe828262000ff5565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008281526020819052604090206001015462000849813362000efe565b6200077b838362000ff5565b604051635708447d60e01b81526001600160a01b0384811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690635708447d9060240160206040518083038186803b158015620008bc57600080fd5b505afa158015620008d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008f7919062001663565b62000908906402540be400620017fd565b90506000670de0b6b3a7640000620009218584620017fd565b6200092d9190620017da565b6040516340c10f1960e01b8152306004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156200099957600080fd5b505af1158015620009ae573d6000803e3d6000fd5b50506040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03881692506323b872dd9150606401602060405180830381600087803b15801562000a0157600080fd5b505af115801562000a16573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a3c91906200150d565b5060008084600281111562000a555762000a556200189c565b5050600184600281111562000a6e5762000a6e6200189c565b5050600284600281111562000a875762000a876200189c565b141562000abf5762000abc7f00000000000000000000000000000000000000000000000000000000000000008388886200105d565b90505b6001600160a01b03808716600090815260016020526040902054168062000c3c57866001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801562000b1a57600080fd5b505afa15801562000b2f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b599190810190620015aa565b876001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801562000b9357600080fd5b505afa15801562000ba8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000bd29190810190620015aa565b60405162000be09062001475565b62000bed9291906200178d565b604051809103906000f08015801562000c0a573d6000803e3d6000fd5b506001600160a01b03888116600090815260016020526040902080546001600160a01b03191691831691909117905590505b6040516340c10f1960e01b8152336004820152602481018390526001600160a01b038216906340c10f1990604401600060405180830381600087803b15801562000c8557600080fd5b505af115801562000c9a573d6000803e3d6000fd5b5050505050505050505050565b60405163e6a4390560e01b81526001600160a01b0384811660048301528381166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a439059060440160206040518083038186803b15801562000d1a57600080fd5b505afa15801562000d2f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d559190620014a3565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790529192509082169063095ea7b390604401602060405180830381600087803b15801562000dc457600080fd5b505af115801562000dd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dff91906200150d565b506000806001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663baa2abde89898985803062000e4642610708620017bf565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e4016040805180830381600087803b15801562000eb457600080fd5b505af115801562000ec9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eef91906200167d565b90999098509650505050505050565b62000f0a828262000802565b620007fe5762000f25816001600160a01b03166014620012b4565b62000f32836020620012b4565b60405160200162000f45929190620016ff565b60408051601f198184030181529082905262461bcd60e51b8252620005479160040162001778565b62000f79828262000802565b620007fe576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000fb13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62001001828262000802565b15620007fe576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390526000919084169063095ea7b390604401602060405180830381600087803b158015620010cc57600080fd5b505af1158015620010e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200110791906200150d565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905286169063095ea7b390604401602060405180830381600087803b1580156200117357600080fd5b505af115801562001188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011ae91906200150d565b5060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e8e3370087868887818130620011f542610708620017bf565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e481019190915261010401606060405180830381600087803b1580156200126d57600080fd5b505af115801562001282573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012a89190620016a2565b98975050505050505050565b60606000620012c5836002620017fd565b620012d2906002620017bf565b67ffffffffffffffff811115620012ed57620012ed620018c8565b6040519080825280601f01601f19166020018201604052801562001318576020820181803683370190505b509050600360fc1b81600081518110620013365762001336620018b2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620013685762001368620018b2565b60200101906001600160f81b031916908160001a90535060006200138e846002620017fd565b6200139b906001620017bf565b90505b60018111156200141d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620013d357620013d3620018b2565b1a60f81b828281518110620013ec57620013ec620018b2565b60200101906001600160f81b031916908160001a90535060049490941c9362001415816200186c565b90506200139e565b5083156200146e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000547565b9392505050565b61117980620018f883390190565b6000602082840312156200149657600080fd5b81356200146e81620018de565b600060208284031215620014b657600080fd5b81516200146e81620018de565b600080600060608486031215620014d957600080fd5b8335620014e681620018de565b9250602084013591506040840135600381106200150257600080fd5b809150509250925092565b6000602082840312156200152057600080fd5b815180151581146200146e57600080fd5b6000602082840312156200154457600080fd5b5035919050565b600080604083850312156200155f57600080fd5b8235915060208301356200157381620018de565b809150509250929050565b6000602082840312156200159157600080fd5b81356001600160e01b0319811681146200146e57600080fd5b600060208284031215620015bd57600080fd5b815167ffffffffffffffff80821115620015d657600080fd5b818401915084601f830112620015eb57600080fd5b815181811115620016005762001600620018c8565b604051601f8201601f19908116603f011681019083821181831017156200162b576200162b620018c8565b816040528281528760208487010111156200164557600080fd5b6200165883602083016020880162001839565b979650505050505050565b6000602082840312156200167657600080fd5b5051919050565b600080604083850312156200169157600080fd5b505080516020909101519092909150565b600080600060608486031215620016b857600080fd5b8351925060208401519150604084015190509250925092565b60008151808452620016eb81602086016020860162001839565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516200173981601785016020880162001839565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200176c81602884016020880162001839565b01602801949350505050565b6020815260006200146e6020830184620016d1565b604081526000620017a26040830185620016d1565b8281036020840152620017b68185620016d1565b95945050505050565b60008219821115620017d557620017d562001886565b500190565b600082620017f857634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156200181a576200181a62001886565b500290565b60008282101562001834576200183462001886565b500390565b60005b83811015620018565781810151838201526020016200183c565b8381111562001866576000848401525b50505050565b6000816200187e576200187e62001886565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620018f457600080fd5b5056fe60806040523480156200001157600080fd5b50604051620011793803806200117983398101604081905262000034916200024a565b81604051602001620000479190620002b4565b60405160208183030381529060405281604051602001620000699190620002e3565b60408051601f1981840301815291905281516200008e90600390602085019062000113565b508051620000a490600490602084019062000113565b5050506000620000b96200010f60201b60201c565b600580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350505062000395565b3390565b828054620001219062000342565b90600052602060002090601f01602090048101928262000145576000855562000190565b82601f106200016057805160ff191683800117855562000190565b8280016001018555821562000190579182015b828111156200019057825182559160200191906001019062000173565b506200019e929150620001a2565b5090565b5b808211156200019e5760008155600101620001a3565b600082601f830112620001cb57600080fd5b81516001600160401b0380821115620001e857620001e86200037f565b604051601f8301601f19908116603f011681019082821181831017156200021357620002136200037f565b816040528381528660208588010111156200022d57600080fd5b620002408460208301602089016200030f565b9695505050505050565b600080604083850312156200025e57600080fd5b82516001600160401b03808211156200027657600080fd5b6200028486838701620001b9565b935060208501519150808211156200029b57600080fd5b50620002aa85828601620001b9565b9150509250929050565b640363c2628160dd1b815260008251620002d68160058501602087016200030f565b9190910160050192915050565b610d8f60f31b815260008251620003028160028501602087016200030f565b9190910160020192915050565b60005b838110156200032c57818101518382015260200162000312565b838111156200033c576000848401525b50505050565b600181811c908216806200035757607f821691505b602082108114156200037957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610dd480620003a56000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063a457c2d711610066578063a457c2d714610209578063a9059cbb1461021c578063dd62ed3e1461022f578063f2fde38b1461026857600080fd5b8063715018a6146101cb5780638da5cb5b146101d357806395d89b41146101ee5780639dc29fac146101f657600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a57806340c10f191461018d57806370a08231146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d61027b565b60405161011a9190610c94565b60405180910390f35b610136610131366004610c6a565b61030d565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610c2e565b610323565b6040516012815260200161011a565b610136610188366004610c6a565b6103d9565b6101a061019b366004610c6a565b610410565b005b61014a6101b0366004610bd9565b6001600160a01b031660009081526020819052604090205490565b6101a0610448565b6005546040516001600160a01b03909116815260200161011a565b61010d6104bc565b6101a0610204366004610c6a565b6104cb565b610136610217366004610c6a565b6104ff565b61013661022a366004610c6a565b61059a565b61014a61023d366004610bfb565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101a0610276366004610bd9565b6105a7565b60606003805461028a90610d4d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b690610d4d565b80156103035780601f106102d857610100808354040283529160200191610303565b820191906000526020600020905b8154815290600101906020018083116102e657829003601f168201915b5050505050905090565b600061031a338484610692565b50600192915050565b60006103308484846107b7565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103ba5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103ce85336103c98685610d36565b610692565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161031a9185906103c9908690610d1e565b6005546001600160a01b0316331461043a5760405162461bcd60e51b81526004016103b190610ce9565b610444828261098f565b5050565b6005546001600160a01b031633146104725760405162461bcd60e51b81526004016103b190610ce9565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b60606004805461028a90610d4d565b6005546001600160a01b031633146104f55760405162461bcd60e51b81526004016103b190610ce9565b6104448282610a6e565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103b1565b61059033856103c98685610d36565b5060019392505050565b600061031a3384846107b7565b6005546001600160a01b031633146105d15760405162461bcd60e51b81526004016103b190610ce9565b6001600160a01b0381166106365760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b1565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166106f45760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103b1565b6001600160a01b0382166107555760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103b1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661081b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103b1565b6001600160a01b03821661087d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103b1565b6001600160a01b038316600090815260208190526040902054818110156108f55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103b1565b6108ff8282610d36565b6001600160a01b038086166000908152602081905260408082209390935590851681529081208054849290610935908490610d1e565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161098191815260200190565b60405180910390a350505050565b6001600160a01b0382166109e55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103b1565b80600260008282546109f79190610d1e565b90915550506001600160a01b03821660009081526020819052604081208054839290610a24908490610d1e565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610ace5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103b1565b6001600160a01b03821660009081526020819052604090205481811015610b425760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103b1565b610b4c8282610d36565b6001600160a01b03841660009081526020819052604081209190915560028054849290610b7a908490610d36565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016107aa565b80356001600160a01b0381168114610bd457600080fd5b919050565b600060208284031215610beb57600080fd5b610bf482610bbd565b9392505050565b60008060408385031215610c0e57600080fd5b610c1783610bbd565b9150610c2560208401610bbd565b90509250929050565b600080600060608486031215610c4357600080fd5b610c4c84610bbd565b9250610c5a60208501610bbd565b9150604084013590509250925092565b60008060408385031215610c7d57600080fd5b610c8683610bbd565b946020939093013593505050565b600060208083528351808285015260005b81811015610cc157858101830151858201604001528201610ca5565b81811115610cd3576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610d3157610d31610d88565b500190565b600082821015610d4857610d48610d88565b500390565b600181811c90821680610d6157607f821691505b60208210811415610d8257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203ce1d55fd3cea0dd40531402d5f95834053b13689c034767fefb82d5c270fe3f64736f6c63430008060033a2646970667358221220f940c6059b12a71f8251bb5882d619246c2771f27f9c60881909d07cfc83534464736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract for the LXAMM (Automated Market Maker). This AMM creates decentralized trading pools on different DEXs. Liquidity is provided with one token only. Tokens can be deposited and withdrawn from this contract. Governance has control over this token. More details about this AMM contact can be found in the README file.*",
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 108,
        "contract": "contracts/lxAMM/LXAMM.sol:LXAMM",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)103_storage)"
      },
      {
        "astId": 1898,
        "contract": "contracts/lxAMM/LXAMM.sol:LXAMM",
        "label": "_depositedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)103_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)103_storage"
      },
      "t_struct(RoleData)103_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 100,
            "contract": "contracts/lxAMM/LXAMM.sol:LXAMM",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 102,
            "contract": "contracts/lxAMM/LXAMM.sol:LXAMM",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}
